{"version":3,"file":"greetings.min.js","sources":["../src/greetings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module greetings\n *\n * @module     block_greetings/greetings\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from 'block_greetings/block/greetings/selectors';\nimport * as Repository from 'block_greetings/block/greetings/repository';\nimport { get_string as getString } from 'core/str';\nimport DynamicForm from 'core_form/dynamicform';\n\n/**\n *\n * @param {Number} userid\n */\nexport const init = (userid) => {\n    registerEventListeners(userid);\n};\n\n/**\n *\n * @param {Number} userid\n */\nconst registerEventListeners = (userid) => {\n    document.addEventListener('click', e =>  {\n        if (e.target.closest(Selectors.actions.showGreetingButton)) {\n            const greetingBlock = document.querySelector(Selectors.regions.greetingBlock);\n\n            Repository.getUser(userid)\n            .then(function(response) {\n                window.console.log(\"Country: \" + response[0].country);\n            });\n\n            if (greetingBlock) {\n                const nameField = document.querySelector(Selectors.regions.inputField);\n                const msg = document.createElement(\"h2\");\n\n                userGreeting(nameField.value)\n                .then((greetingStr) => {\n                    msg.append(greetingStr);\n                    greetingBlock.append(msg);\n                })\n                .catch();\n            }\n        }\n        if (e.target.closest(Selectors.actions.resetButton)) {\n            const nameField = document.querySelector(Selectors.regions.inputField);\n            nameField.value = '';\n\n            const greetingBlock = document.querySelector(Selectors.regions.greetingBlock);\n            greetingBlock.innerHTML  = '';\n        }\n    });\n};\n\n/**\n * Return a personalised greeting.\n *\n * @param   {String} name The name of the person to greet\n * @returns {Promise}\n */\nconst userGreeting = (name) => getString('greetinguserau', 'block_greetings', name);\n\nexport const addMessage = (selector, formClass) => {\n    const form = new DynamicForm(document.querySelector(selector), formClass);\n\n    form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n        e.preventDefault();\n        const response = e.detail;\n        const frm = document.querySelector(selector);\n        frm.querySelector('[name=message]').value = '';\n\n        //form.load({userid: response.userid, message: response.message});\n        window.console.log('Form submitted: ' + JSON.stringify(response));\n        Repository.addMessage(response.userid, response.message)\n        .then(function(res) {\n            window.console.log(JSON.stringify(res));\n            fetchMessages(response.userid);\n        });\n    });\n};\n\nexport const fetchMessages = (userid) => {\n    const messages = document.querySelector('[id=greeting-messages]');\n\n    Repository.fetchMessages(userid).then(res => {\n        let html = `<table class=\"table table-bordered\"><tbody>`;\n        JSON.parse(res.result).forEach(data => {\n            html += `<tr>`;\n            html += `<td>${data.id}</td>`;\n            html += `<td>${data.message}</td>`;\n            html += `<td>${data.timecreated}</td>`;\n            html += `<td>${data.firstname}</td>`;\n            html += `</tr>`;\n        });\n        html += `</tbody></table>`;\n\n        messages.innerHTML = html;\n    });\n};\n"],"names":["userid","registerEventListeners","document","addEventListener","e","target","closest","Selectors","actions","showGreetingButton","greetingBlock","querySelector","regions","Repository","getUser","then","response","window","console","log","country","nameField","inputField","msg","createElement","userGreeting","value","greetingStr","append","catch","resetButton","innerHTML","name","selector","formClass","form","DynamicForm","events","FORM_SUBMITTED","preventDefault","detail","JSON","stringify","addMessage","message","res","fetchMessages","messages","html","parse","result","forEach","data","id","timecreated","firstname"],"mappings":";;;;;;;+4BAgCqBA,SACjBC,uBAAuBD,eAOrBC,uBAA0BD,SAC5BE,SAASC,iBAAiB,SAASC,OAC3BA,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQC,oBAAqB,OAClDC,cAAgBR,SAASS,cAAcJ,mBAAUK,QAAQF,kBAE/DG,WAAWC,QAAQd,QAClBe,MAAK,SAASC,UACXC,OAAOC,QAAQC,IAAI,YAAcH,SAAS,GAAGI,YAG7CV,cAAe,OACTW,UAAYnB,SAASS,cAAcJ,mBAAUK,QAAQU,YACrDC,IAAMrB,SAASsB,cAAc,MAEnCC,aAAaJ,UAAUK,OACtBX,MAAMY,cACHJ,IAAIK,OAAOD,aACXjB,cAAckB,OAAOL,QAExBM,YAGLzB,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQsB,aAAc,CAC/B5B,SAASS,cAAcJ,mBAAUK,QAAQU,YACjDI,MAAQ,GAEIxB,SAASS,cAAcJ,mBAAUK,QAAQF,eACjDqB,UAAa,QAWjCN,aAAgBO,OAAS,mBAAU,iBAAkB,kBAAmBA,0BAEpD,CAACC,SAAUC,mBAC3BC,KAAO,IAAIC,qBAAYlC,SAASS,cAAcsB,UAAWC,WAE/DC,KAAKhC,iBAAiBgC,KAAKE,OAAOC,gBAAiBlC,IAC/CA,EAAEmC,uBACIvB,SAAWZ,EAAEoC,OACPtC,SAASS,cAAcsB,UAC/BtB,cAAc,kBAAkBe,MAAQ,GAG5CT,OAAOC,QAAQC,IAAI,mBAAqBsB,KAAKC,UAAU1B,WACvDH,WAAW8B,WAAW3B,SAAShB,OAAQgB,SAAS4B,SAC/C7B,MAAK,SAAS8B,KACX5B,OAAOC,QAAQC,IAAIsB,KAAKC,UAAUG,MAClCC,cAAc9B,SAAShB,qBAKtB8C,cAAiB9C,eACpB+C,SAAW7C,SAASS,cAAc,0BAExCE,WAAWiC,cAAc9C,QAAQe,MAAK8B,UAC9BG,KAAQ,8CACZP,KAAKQ,MAAMJ,IAAIK,QAAQC,SAAQC,OAC3BJ,MAAS,OACTA,MAAS,OAAMI,KAAKC,UACpBL,MAAS,OAAMI,KAAKR,eACpBI,MAAS,OAAMI,KAAKE,mBACpBN,MAAS,OAAMI,KAAKG,iBACpBP,MAAS,WAEbA,MAAS,mBAETD,SAAShB,UAAYiB"}